<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_386030_o365_work_o365_group</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>CreateGroupOnTenant</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	var base_url = "https://graph.microsoft.com/v1.0/groups";
	var userBaseURL = "https://graph.microsoft.com/v1.0/users/";
	
	try {
		// get o365 credentiels from the store
		// TODO: split this into a library
		var provider = new sn_cc.StandardCredentialsProvider();
		var credential = provider.getCredentialByID("7fcd9326db5333002207b08039961999");
		var client_id = credential.getAttribute("client_id");
		var tenant_id = credential.getAttribute("tenant_id");
		var secret_key = credential.getAttribute("secret_key");
		
		var login_url = "https://login.microsoft.com/" + tenant_id + "/oauth2/v2.0/token";
		
		var login = new sn_ws.RESTMessageV2();
		login.setEndpoint(login_url);
		login.setHttpMethod('POST');
		login.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
		var form = '';
		form += "client_id=" + encodeURI(client_id);
		form += "&scope=" + encodeURI("https://graph.microsoft.com/.default");
		form += "&client_secret=" + encodeURI(secret_key);
		form += "&grant_type=" + encodeURI("client_credentials");
		login.setRequestBody(form);
		
		var login_resp = login.execute();
		var login_response = JSON.parse(login_resp.getBody());
		gs.info(login_response);
		var access_token = login_response.access_token;
		gs.info(access_token);
		
		// get the owners
		var group_owners = [];
		var owners_list = current.owners_list.toString().split(",");
		for (var i = 0; i < owners_list.length; i++) {
			var azureUser = new GlideRecord('x_386030_o365_work_azure_user');
			if (!azureUser.get(owners_list[i])) continue;
			gs.info(userBaseURL + azureUser.object_id);
			group_owners.push(userBaseURL + azureUser.object_id);
		}
		
		// XXX consider splitting this out
		var group_members = group_owners;
		
		var groupDescriptor = {
			"displayName": current.group_name.toString(),
			"mailNickname": current.mail_nickname.toString(),
			"description": current.description.toString(),
			"members@odata.bind": group_members,
			"owners@odata.bind": group_owners,
			"visibility": "Private",
			"groupTypes": ["Unified"],
			"mailEnabled": true,
			"securityEnabled": false
		};
		
		// XXX check for existing group and set the ID before bailing
		
		// do the actual creation
		var create = new sn_ws.RESTMessageV2();
		create.setEndpoint(base_url);
		create.setHttpMethod('POST');
		create.setRequestHeader('Authorization', 'Bearer ' + access_token);
		create.setRequestHeader('Content-Type', 'application/json');
		var createReqBody = JSON.stringify(groupDescriptor);
		gs.info(createReqBody);
		create.setRequestBody(createReqBody);
		var createResp = create.execute();
		var createRespBody = createResp.getBody();
		gs.info(createRespBody);
		created = JSON.parse(createRespBody);
		gs.info(created);
		
		current.azure_guid = created.id;
		current.update();
		
	} catch (ex) {
		gs.error(ex);
	}
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-08-19 15:06:59</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>a78223e6db5333002207b080399619f2</sys_id>
        <sys_mod_count>49</sys_mod_count>
        <sys_name>CreateGroupOnTenant</sys_name>
        <sys_overrides/>
        <sys_package display_value="O365 Working Group" source="x_386030_o365_work">df5ec0fcdb1333002207b08039961965</sys_package>
        <sys_policy/>
        <sys_scope display_value="O365 Working Group">df5ec0fcdb1333002207b08039961965</sys_scope>
        <sys_update_name>sys_script_a78223e6db5333002207b080399619f2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-08-23 09:52:28</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=a78223e6db5333002207b080399619f2"/>
</record_update>
